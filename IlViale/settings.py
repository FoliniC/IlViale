"""
Django settings for IlViale project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import environ
import os
import logging
import pkg_resources

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)
# reading .env file
environ.Env.read_env()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
#BASE_DIR = '/home/azureuser/IlViale'
BASE_URL = ''
LOGIN_URL = '/admin/login/'
logger.info(f'BASE_DIR: {BASE_DIR}')
env = environ.Env() 
environ.Env.read_env()
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'p$6-^4q-9@j2z!y^d^^5l3-nc_pvlh8*8ld&_(0!971-b6jvu('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG')

SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_CONTENT_TYPE_NOSNIFF = False
X_FRAME_OPTIONS = 'DENY'

ALLOWED_HOSTS = ['*']

# SERVER_TYPE = 'DEV'
SITE_ID = 1


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'BlogView.apps.BlogViewConfig',
    'sitetree',
    'environ',
    'tinymce',
    'sorl.thumbnail',
    'newsletter',
    'django_user_agents',
#    'django_ses',
    'cookielaw',
    'captcha',
    'debug_toolbar',    
    'IlViale', 
    'turni_bar.apps.TurniBarConfig',
    'biblioteca',
] 

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_user_agents.middleware.UserAgentMiddleware',
    #'debug_toolbar.middleware.DebugToolbarMiddleware',
    ]
CSRF_TRUSTED_ORIGINS = [ 'https://vialeformica.org', ]
# SITETREE_CLS = 'IlViale.mysitetree.MySiteTree'

# Name of cache backend to cache user agents. If it not specified default
# cache alias will be used. Set to `None` to disable caching.
USER_AGENTS_CACHE = 'default'

ROOT_URLCONF = 'IlViale.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'IlViale', 'templates'),
                 os.path.join(BASE_DIR, 'sito_statico', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'debug': True,  
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                
                #'django.template.context_processors.csrf', 
                'django.template.context_processors.tz', 
                'django.template.context_processors.static', 
                'django.template.context_processors.media', 
                'django.template.context_processors.i18n',                
                #'IlViale.context_base_url.baseurl',
                'IlViale.context_processors.canonical_url',
            ],
        },
    },
]

TEMPLATE_CONTEXT_PROCESSORS = [
    {"django.core.context_processors.request",      
     "django.contrib.auth.context_processors.auth",}
    ]

WSGI_APPLICATION = 'IlViale.wsgi.application'

INTERNAL_IPS = [
    '127.0.0.1',
]

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'it'

TIME_ZONE = 'Europe/Rome'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'staticfiles'),
        os.path.join(BASE_DIR, 'sito_statico'),
    ]
# Random secret key
import random
key_chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
SECRET_KEY = ''.join([
    random.SystemRandom().choice(key_chars) for i in range(50)
])

# settings.py

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            #'format': '[%(asctime)s] %(levelname)s %(filename)s:%(lineno)s %(message)s',
            'format': '[%(asctime)s] %(levelname)s %(filename)s:%(lineno)s %(message)s Physical path: %(pathname)s',
            #'style': '{',
            # %(module) %(process:d) %(thread:d) 
            #'datefmt': "%d/%b/%Y %H:%M:%S",
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
   # [formatter_generic]
#format = %(created)f %(levelname)-5.5s [%(name)s] %(message)s
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file1': { 
            'level': 'DEBUG', 
            'class': 'logging.FileHandler', 
            'filename': os.path.join(BASE_DIR, 'logs/debug.log'), 
            'formatter': 'verbose',
            },
        # 'file1': {
        #     'level': 'INFO',
        #     #'class': 'logging.FileHandler',    
        #     'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
        #     'filename': os.path.join(BASE_DIR, 'logs', 'ilviale.log'),
        #     'formatter': 'verbose',
        #     'maxBytes': 50*1024,
        #     'backupCount': 5    
        # },
        # 'file': {
        #     'level': 'INFO',
        #     'class': 'logging.FileHandler',    
        #     'filename': os.path.join(BASE_DIR, 'ilviale.log'),
        #     'formatter': 'verbose',
        # },  
    },
    'loggers': {
         'newsletter': {
            'handlers': ['console','file1',],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django': {
            'handlers': ['console','file1',],
            'level': 'DEBUG',
            'propagate': True,

        },
        #'azure.core.pipeline.policies.http_logging_policy': { 'handlers': ['console'], 'level': 'DEBUG', 'propagate': False, },
    },
}

#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
#EMAIL_BACKEND = 'django_ses.SESBackend'
EMAIL_BACKEND = 'django_azure_communication_email.EmailBackend'
#EMAIL_HOST = 'email-smtp.us-east-1.amazonaws.com'
#AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')     #'AKIA4NPCGD67DG5UVZ5U'
#AWS_SECRET_ACCESS_KEY = env('EMAIL_HOST_PASSWORD')
#EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
#EMAIL_USE_TLS = True
#EMAIL_PORT = 587
EMAIL_HOST_USER = 'DoNotReply@vialeformica.org'
# on unix > create a shell script in /etc/profile.d
# sudo nano /etc/profile.d/set_environment.sh   
# insert following line at the end
# export EMAIL_HOST_PASSWORD='your_password'
# in ubuntu with apache set environment variable in
# sudo nano /etc/apache2/envvars
# on windows > setx EMAIL_HOST_PASSWORD "your_password" /M

#DEFAULT_CONFIRM_EMAIL = True
#NEWSLETTER_RICHTEXT_WIDGET = "tinymce.widgets.TinyMCE"
# installed_packages = sorted(["%s==%s" % (i.key, i.version) 
#                              for i in pkg_resources.working_set]) 
# logger.info("Installed packages:\n" + "\n".join(installed_packages))

# for key, value in os.environ.items():
#     logger.info(f'{key}: {value}')
# #logging.getLogger("azure.core.pipeline.policies.http_logging_policy").setLevel(logging.DEBUG)
AZURE_COMMUNICATION_CONNECTION_STRING = os.environ['AZURE_COMMUNICATION_CONNECTION_STRING']
DEFAULT_FROM_EMAIL = os.environ['DEFAULT_FROM_EMAIL']
# from azure.communication.email import EmailClient
# connection_string = os.getenv("AZURE_COMMUNICATION_CONNECTION_STRING") 
# client = EmailClient.from_connection_string(connection_string) 
# message = { "senderAddress": "DoNotReply@vialeformica.org", "recipients": { "to": [{"address": "carlo.folini@hotmail.com"}] }, "content": { "subject": "Test Email", "plainText": "Hello world via email.", "html": """ <html> <body> <h1>Hello world via email.</h1> </body> </html>""" }, } 
# poller = client.begin_send(message) 
# result = poller.result() 
# print("Message sent: ", result.message_id)

# try:
#     connection_string = "endpoint=https://communicationsviale.europe.communication.azure.com/;accesskey=xxxxxxxxxxxxxxxxxxxx"
#     logger.info(f'from code: {connection_string}')
#     logger.info(f'from env : {AZURE_COMMUNICATION_CONNECTION_STRING}')
#     client = EmailClient.from_connection_string(connection_string)

#     message = {
#         "senderAddress": "DoNotReply@vialeformica.org",
#         "recipients": {
#             "to": [{"address": "carlo.folini@hotmail.com"}]
#         },
#         "content": {
#             "subject": "33333333333Test Email",
#             "plainText": "Hello world via email.",
#             "html": """
#             <html>
#                 <body>
#                     <h1>Hello world via email.</h1>
#                 </body>
#             </html>"""
#         },
        
#     }

#     poller = client.begin_send(message)
#     result = poller.result()
#     print("Message sent: ", result.message_id)

# except Exception as ex:
#     print(ex)


